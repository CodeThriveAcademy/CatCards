name: Cat Cards Pipeline

on:
  push:
    branches: [main, CAT*, cc*]
  pull_request:
    branches: [main, CAT*, cc*]

jobs:
  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci
      - name: Lint
        run: npm run lint

  cypress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run Website
        run: |
          npm run start &
          sleep 10
      - name: Cypress Chrome
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ./cypress/screenshots
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: ./cypress/videos

  deploy:
    runs-on: ubuntu-latest
    needs: [verify, cypress]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm ci
      - name: Build
        run: npm run build --production
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Run cloudformation deployment resources
        run: |
          aws cloudformation update-stack --stack-name catcards --template-body file://deployment/main.yml --parameters ParameterKey=DomainName,ParameterValue=codingpagoda.com ParameterKey=SubDomain
      - name: Copy Over Content to the S3 Bucket
        run: |
          aws s3 sync dist s3://catcards.codingpagoda.com
      - name: Invalidate CDN
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions | jq -r '.DistributionList.Items[] | select( .Aliases.Items[0] | contains("${{ vars.USERID }}.codivationacademy.com") ) | .Id')
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/projects/catcards/"
